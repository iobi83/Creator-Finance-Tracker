import Stripe from 'stripe';
export const config = { api: { bodyParser: false } };

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', { apiVersion: process.env.STRIPE_API_VERSION || '2024-06-20' });
  const sig = req.headers['stripe-signature'];
  const buf = await new Promise((r)=>{const c=[]; req.on('data',d=>c.push(d)); req.on('end',()=>r(Buffer.concat(c)));});
  try {
    const evt = stripe.webhooks.constructEvent(buf, sig, process.env.STRIPE_WEBHOOK_SECRET || '');
    console.log('[stripe-webhook]', evt.type);
    const o = evt.data?.object || {};
    console.log('[stripe-webhook:data]', {
      mode: o.mode,
      email: (o.customer_details?.email || o.customer_email || o.metadata?.email || null),
      amount_total: o.amount_total,
      subscription: o.subscription,
      customer: o.customer
    });
    console.log('[stripe-webhook:env]', {
      hasRoleKey: !!(process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_KEY),
      urlPrefix: (process.env.NEXT_PUBLIC_SUPABASE_URL||'').slice(0,30)
    });
  const _url=(process.env.NEXT_PUBLIC_SUPABASE_URL||'')+'/rest/v1/profiles';
  const _key=(process.env.SUPABASE_SERVICE_ROLE_KEY||process.env.SUPABASE_SERVICE_KEY||'').trim();
  const _email=(o.customer_details?.email||o.customer_email||o.metadata?.email||'').trim();
  const _uid=(o.metadata?.supabase_user_id||'').trim();
  const _ent=async(e)=>{try{const h={'apikey':_key,'Authorization':`Bearer ${_key}`,'Content-Type':'application/json','Prefer':'resolution=merge-duplicates'};const r=await fetch((process.env.NEXT_PUBLIC_SUPABASE_URL||'')+'/rest/v1/entitlements',{method:'POST',headers:h,body:JSON.stringify(e)});console.log('[ent:res]',{status:r.status});if(!r.ok){const t=await r.text().catch(()=> '');console.log('[ent:body]',t.slice(0,300));}}catch(err){console.log('[ent:err]',err.message)}};
  const upd=async(b)=>{try{const h={'apikey':_key,'Authorization':`Bearer ${_key}`,'Content-Type':'application/json','Prefer':'return=minimal'};const q=_uid?`?id=eq.${encodeURIComponent(_uid)}`:(_email?`?email=eq.${encodeURIComponent(_email)}`:'');if(!q||!_key||!_url){console.log('[upd:skip]',{hasQ:!!q,hasKey:!!_key,hasUrl:!!_url});return;}const r=await fetch(_url+q,{method:'PATCH',headers:h,body:JSON.stringify(b)});console.log('[upd:res]',{status:r.status});}catch(e){console.log('[upd:err]',e.message)}};
  if(evt.type==='checkout.session.completed'){if(!_uid&&_email&&o.mode==='payment'){await _ent({email:_email,plan:'premium_lifetime',stripe_customer_id:o.customer||null});} if(!_uid&&_email&&o.mode==='subscription'&&(o.metadata?.grant_trial==='1')){await _ent({email:_email,plan:'trial',trial_used:true,stripe_customer_id:o.customer||null});}}
  if(evt.type==='invoice.payment_succeeded'){if(!_uid&&_email){await _ent({email:_email,plan:'premium_monthly',stripe_customer_id:o.customer||null});}}
  if(evt.type==='checkout.session.completed'){if(o.mode==='payment'){await upd({plan:'premium_lifetime'});}else if(o.mode==='subscription' && (o.metadata?.grant_trial==='1')){await upd({plan:'trial',trial_used:true});}}
  if(evt.type==='invoice.payment_succeeded'){await upd({plan:'premium_monthly'});}
    return res.json({ ok: true });
  } catch (e) {
    console.error('[stripe-webhook] verify failed:', e.message);
    return res.status(400).json({ ok: false });
  }
}
