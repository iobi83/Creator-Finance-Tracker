import Stripe from 'stripe';
import { serverSupabaseFromToken } from '../../lib/supabaseClient';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: process.env.STRIPE_API_VERSION || '2024-06-20',
});

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end('Method Not Allowed');

  try {
    const token = (req.headers.authorization || '').replace('Bearer ', '');
    const supabase = serverSupabaseFromToken(token);
    const { data: { user } = {} } = await supabase.auth.getUser();

    // Use monthly price from env (public is fine to read on server)
    const priceId =
      (req.body && req.body.priceId) ||
      process.env.NEXT_PUBLIC_STRIPE_MONTHLY_PRICE_ID;

    if (!priceId) {
      return res.status(400).json({ ok: false, error: 'Missing priceId' });
    }

    const price = await stripe.prices.retrieve(priceId);
    const mode = price.recurring ? 'subscription' : 'payment';
    const site = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'\;

    // Determine trial eligibility from profiles.trial_used
    let trialEligible = false;
    if (mode === 'subscription' && user?.id) {
      try {
        const { data: prof } = await supabase
          .from('profiles')
          .select('trial_used')
          .eq('id', user.id)
          .single();
        trialEligible = !(prof && prof.trial_used);
      } catch {
        trialEligible = false;
      }
    }

    const trialDays = parseInt(process.env.STRIPE_TRIAL_DAYS || '7', 10);

    const sessionParams = {
      mode,
      line_items: [{ price: price.id, quantity: 1 }],
      success_url: `${site}/success`,
      cancel_url: `${site}/cancel`,
      customer_email: user?.email || undefined,
      metadata: {
        supabase_user_id: user?.id || '',
        email: user?.email || '',
      },
      allow_promotion_codes: true,
    };

    // Only for subscriptions and only if not used before
    if (trialEligible) {
      sessionParams.subscription_data = { trial_period_days: trialDays };
    }

    const session = await stripe.checkout.sessions.create(sessionParams);

    // Best-effort mark as used if we just granted the trial (webhook can harden later)
    if (trialEligible) {
      try {
        await supabase
          .from('profiles')
          .update({ trial_used: true })
          .eq('id', user.id);
      } catch {}
    }

    return res.status(200).json({ url: session.url, trialEligible });
  } catch (e) {
    return res.status(500).json({ ok: false, error: e.message });
  }
}
