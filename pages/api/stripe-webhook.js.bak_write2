import Stripe from 'stripe';
export const config = { api: { bodyParser: false } };

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', { apiVersion: process.env.STRIPE_API_VERSION || '2024-06-20' });
  const sig = req.headers['stripe-signature'];
  const buf = await new Promise((r)=>{const c=[]; req.on('data',d=>c.push(d)); req.on('end',()=>r(Buffer.concat(c)));});
  try {
    const evt = stripe.webhooks.constructEvent(buf, sig, process.env.STRIPE_WEBHOOK_SECRET || '');
    console.log('[stripe-webhook]', evt.type);
    const o = evt.data?.object || {};
    console.log('[stripe-webhook:data]', {
      mode: o.mode,
      email: (o.customer_details?.email || o.customer_email || o.metadata?.email || null),
      amount_total: o.amount_total,
      subscription: o.subscription,
      customer: o.customer
    });
    console.log('[stripe-webhook:env]', {
      hasRoleKey: !!(process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_KEY),
      urlPrefix: (process.env.NEXT_PUBLIC_SUPABASE_URL||'').slice(0,30)
    });
  const _url=(process.env.NEXT_PUBLIC_SUPABASE_URL||'')+'/rest/v1/profiles';
  const _key=(process.env.SUPABASE_SERVICE_ROLE_KEY||process.env.SUPABASE_SERVICE_KEY||'').trim();
  const _email=(o.customer_details?.email||o.customer_email||o.metadata?.email||'').trim();
  const _uid=(o.metadata?.supabase_user_id||'').trim();
    return res.json({ ok: true });
  } catch (e) {
    console.error('[stripe-webhook] verify failed:', e.message);
    return res.status(400).json({ ok: false });
  }
}
